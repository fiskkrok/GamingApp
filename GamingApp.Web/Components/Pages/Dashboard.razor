@* @page "/dashboard"
@using System.Security.Claims
@using GamingApp.Web.Components.Blocks
@using GamingApp.Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject GameApiClient GameApi
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavigationManager

<PageTitle>Dashboard - Game Portal</PageTitle>

<FluentCard>
    <h1 class="page-title">Welcome to Your Gaming Dashboard</h1>

    @if (_loading)
    {
        <FluentProgressRing />
    }
    else
    {
        <FluentGrid Columns="3" ColumnSpan="1">
            <FluentGridItem>
                <FluentCard>
                    <h2>Recently Played</h2>
                    @if (_recentGames.Any())
                    {
                        <FluentDataGrid Items="_recentGames.AsQueryable()" GridTemplateColumns="1fr 1fr">
                            <PropertyColumn Property="@(g => g.Name)" Title="Game" />
                            <PropertyColumn Property="@(g => g.LastPlayedDate)" Title="Last Played" Format="MMM dd, yyyy" />
                        </FluentDataGrid>
                    }
                    else
                    {
                        <p>No recent games played.</p>
                    }
                </FluentCard>
            </FluentGridItem>

            <FluentGridItem>
                <FluentCard>
                    <h2>Your Stats</h2>
                    <FluentStack Orientation="Orientation.Vertical">
                        <span>Total Play Time: @_totalPlayTime.TotalHours.ToString("F1") hours</span>
                        <span>Games Played: @_gamesPlayed</span>
                        <span>Achievements Unlocked: @_achievementsUnlocked</span>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>

            <FluentGridItem>
                <FluentCard>
                    <h2>Quick Actions</h2>
                    <FluentStack Orientation="Orientation.Vertical">
                        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => NavigateTo("/games"))">Browse Games</FluentButton>
                        <FluentButton OnClick="@(() => NavigateTo("/profile"))">View Profile</FluentButton>
                        <FluentButton OnClick="@(() => NavigateTo("/friends"))">Friends List</FluentButton>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>

        <FluentCard class="mt-4">
            <h2>Game Recommendations</h2>
            <GameCardComponent Games="_recommendedGames" />
        </FluentCard>
    }
</FluentCard>

@code {
    private IQueryable<Game>? _recentGames = [];
    private IQueryable<Game>? _recommendedGames = [];
    private TimeSpan _totalPlayTime = TimeSpan.Zero;
    private int _gamesPlayed = 0;
    private int _achievementsUnlocked = 0;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated) return;

        try
        {
            _recentGames = await GameApi.GetRecentGamesAsync(5, user.FindFirstValue("Sid"), CancellationToken);
            _recommendedGames = await GameApi.GetRecommendedGamesAsync(4, CancellationToken);
            var userStats = await GameApi.GetUserStatsAsync(user.FindFirstValue("Sid"));
            _totalPlayTime = userStats.TotalPlayTime;
            _gamesPlayed = userStats.GamesPlayed;
            _achievementsUnlocked = userStats.AchievementsUnlocked;
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show error message)
            Console.Error.WriteLine($"Error loading dashboard: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    public CancellationToken CancellationToken { get; set; }

    private void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }
}
 *@