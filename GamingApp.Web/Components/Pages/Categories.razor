@page "/categories"
@using GamingApp.Web.Clients
@using GamingApp.Web.Models
@inject CategoryApiClient CategoryApiClient
@inject NavigationManager NavigationManager

<PageTitle>Game Categories - Pixel Quest</PageTitle>

<div class="container">
    <div class="dashboard-wrapper">
        <h1 class="page-title">Game Categories</h1>
        <p class="text-center mb-3">Explore our diverse collection of game genres!</p>

        @if (_loading)
        {
            <div class="text-center">
                <FluentProgressRing />
            </div>
        }
        else if (_error)
        {
            <FluentMessageBar Title="Error" Intent="MessageIntent.Error">
                @_errorMessage
            </FluentMessageBar>
        }
        else if (!_categories.Any())
        {
            <FluentMessageBar Title="No categories found" Intent="MessageIntent.Warning">
                Check back later for new categories!
            </FluentMessageBar>
        }
        else
        {
            <div class="grid grid-cols-3 gap-4">
                @foreach (var category in _categories)
                {
                    <FluentCard class="category-card" @onclick="() => NavigateToCategory(category.Id)">
                        <div class="category-icon">
                            <FluentIcon Value="@(new Icons.Regular.Size48.Games())" Color="Color.Accent" />
                        </div>
                        <h3>@category.Name</h3>
                        <p class="category-description">@(category.Description ?? "Explore games in this category")</p>
                        <span class="game-count">@category.GameCount @(category.GameCount == 1 ? "game" : "games")</span>
                    </FluentCard>
                }
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<Category> _categories = Enumerable.Empty<Category>();
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _categories = await CategoryApiClient.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Error fetching categories: {ex.Message}";
            Console.Error.WriteLine(_errorMessage);
        }
        finally
        {
            _loading = false;
        }
    }

    private void NavigateToCategory(int categoryId)
    {
        NavigationManager.NavigateTo($"/games?category={categoryId}");
    }
}