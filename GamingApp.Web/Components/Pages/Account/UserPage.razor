@page "/profile"
@using GamingApp.Web.Clients
@using GamingApp.Web.Components.Dialogs
@using GamingApp.Web.Models
@inject UserApiClient UserApi
@inject IDialogService DialogService
@inject IToastService ToastService
@attribute [Authorize]

<PageTitle>User Profile - Pixel Quest</PageTitle>

<div class="container">
    <div class="dashboard-wrapper">
        <h1 class="page-title">@(_userProfile != null ? $"Profile of {_userProfile.InGameUserName}" : "Welcome to Pixel Quest!")</h1>

        @if (_loading)
        {
            <FluentProgressRing />
        }
        else if (_error)
        {
            <FluentMessageBar Title="Error" Intent="MessageIntent.Error">
                @_errorMessage
            </FluentMessageBar>
        }
        else if (_userProfile == null)
        {
            <div class="card text-center">
                <h2 class="mb-2">Create Your Game Account</h2>
                <p class="mb-2">You don't seem to have a Game Account yet. Let's create one!</p>
                <FluentButton Appearance="Appearance.Accent" OnClick="PromptCreateAccount">Create Game Account</FluentButton>
            </div>
        }
        else
        {
            <div class="grid grid-cols-3 gap-4">
                <div class="card">
                    <h2 class="mb-2">About Me</h2>
                    @if (string.IsNullOrWhiteSpace(_userProfile.Bio))
                    {
                        <p>Tell us about yourself!</p>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => EditBio())">Add Bio</FluentButton>
                    }
                    else
                    {
                        <p>@_userProfile.Bio</p>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => EditBio())">Edit Bio</FluentButton>
                    }
                </div>

                <div class="card">
                    <h2 class="mb-2">Gaming Stats</h2>
                    <div class="d-flex flex-column">
                        <span class="mb-1"><strong>Total Play Time:</strong> @_userProfile.TotalPlayTime.TotalHours.ToString("F1") hours</span>
                        <span class="mb-1"><strong>Games Played:</strong> @_userProfile.GamesPlayed.Count</span>
                        <span><strong>Achievements Unlocked:</strong> @_userProfile.AchievementsUnlocked.Count</span>
                    </div>
                </div>

                <div class="card">
                    <h2 class="mb-2">Recent Achievements</h2>
                    @if (_userProfile.RecentAchievements().Any())
                    {
                        <FluentDataGrid Items="_userProfile.RecentAchievements().AsQueryable()" GridTemplateColumns="auto 1fr auto">
                            <PropertyColumn Property="@(a => a.Name)" Title="Achievement" />
                            <PropertyColumn Property="@(a => a.UnlockedDate)" Title="Unlocked" Format="MMM dd, yyyy" />
                        </FluentDataGrid>
                    }
                    else
                    {
                        <p>No achievements unlocked yet. Start playing to earn some!</p>
                    }
                </div>
            </div>

            <div class="mt-3">
                <h2 class="mb-2">Favorite Games</h2>
                @if (_userProfile.GamesPlayed.Any())
                {
                    <div class="grid grid-cols-4 gap-4">
                        @foreach (var game in _userProfile.GamesPlayed.Take(4))
                        {
                            <div class="card text-center">
                                <img src="@game.PictureUrl" alt="@game.Name" class="mb-2" style="width: 100%; height: 150px; object-fit: cover;" />
                                <h3 class="mb-1">@game.Name</h3>
                                <p>Last played: @(game.LastPlayedDate?.ToString("MMM dd, yyyy") ?? "Never")</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p>You haven't played any games yet. Check out our <a href="/games">Games Library</a> to get started!</p>
                }
            </div>
        }
    </div>
</div>

@code {
    private UserProfile? _userProfile;
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userProfile = await UserApi.GetUserProfileAsync();
            _loading = false;
        }
        catch (Exception ex)
        {
            if (ex is HttpRequestException httpEx && httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _userProfile = null;
            }
            else
            {
                _error = true;
                _errorMessage = $"Error loading user profile: {ex.Message}";
            }
            _loading = false;
        }
    }

    private async Task PromptCreateAccount()
    {
        var dialogParameters = new DialogParameters
            {
                Title = "Create Game Account",
                PrimaryAction = "Create",
                SecondaryAction = "Cancel",
                Width = "400px",
                Height = "300px",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await DialogService.ShowDialogAsync<CreateUserProfileDialog>(new CreateUserProfileModel(), dialogParameters);
        var result = await dialog.Result;

        if (result is { Cancelled: false, Data: CreateUserProfileModel model })
        {
            await CreateGameAccount(model.InGameUserName);
            _userProfile = await UserApi.GetUserProfileAsync();
        }
    }

    private async Task CreateGameAccount(string inGameUserName)
    {
        try
        {
            _userProfile = await UserApi.CreateUserProfileAsync(inGameUserName);
            _userProfile = await UserApi.GetUserProfileAsync();
            ToastService.ShowSuccess("Game Account created successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error creating Game Account: {ex.Message}");
        }
    }

    private async Task EditBio()
    {
        // Implement bio editing functionality
        // This could open a dialog or inline editing form
        await Task.CompletedTask;
    }
}
