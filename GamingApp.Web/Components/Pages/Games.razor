@page "/games"
@page "/games/{CurrentPage:int}"
@using GamingApp.Web.Clients
@using GamingApp.Web.Models
@using GamingApp.Web.Components.Blocks
@inject GameApiClient GameApi
@attribute [StreamRendering(true)]

<PageTitle>Games Library - Pixel Quest</PageTitle>

<div class="container">
    <div class="dashboard-wrapper">
        <h1 class="page-title">Games Library</h1>
        <p class="text-center mb-3">Explore our collection of exciting games!</p>

        <div class="d-flex justify-content-between align-items-center mb-3">
            <FluentSearch Class="fluent-search" Placeholder="Search games..." @bind-Value="@_searchTerm"
                @oninput="FilterGames" />
            <FluentSelect TOption="string" Class="fluent-select" Items="@_genres" @bind-Value="_selectedGenre"
                SelectedOptionChanged="FilterGames" Placeholder="Select genre" />
        </div>

        @if (_loading)
        {
            <div class="text-center">
                <FluentProgressRing />
            </div>
        }
        else if (_error)
        {
            <FluentMessageBar Title="Error" Intent="MessageIntent.Error">
                @_errorMessage
            </FluentMessageBar>
        }
        else if (!_filteredGames.Any())
        {
            <FluentMessageBar Title="No games found" Intent="MessageIntent.Warning">
                Try adjusting your search or check back later for new additions!
            </FluentMessageBar>
        }
        else
        {
            <div class="grid grid-cols-3 gap-4">
                <GameCardComponent Games="_filteredGames.Skip((CurrentPage - 1) * PageSize).Take(PageSize)" />
            </div>
            <div class="mt-3">
                <FluentPaginator State="@State" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter][EditorRequired] public PaginationState State { get; set; } = new();
    private IEnumerable<Game> _games = Array.Empty<Game>();
    private IEnumerable<Game> _filteredGames = Array.Empty<Game>();
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private string _searchTerm = string.Empty;
    private string _selectedGenre = string.Empty;
    private IEnumerable<string> _genres = Array.Empty<string>();
    private const int PageSize = 12;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _games = await GameApi.GetGamesAsync();
            _filteredGames = _games;
            _genres = _games.Select(g => g.Genre.Name).Distinct().OrderBy(g => g);

        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Error fetching games: {ex.Message}";
            Console.Error.WriteLine(_errorMessage);
        }
        finally
        {
            _loading = false;
        }

        State.ItemsPerPage = PageSize;
        await State.SetTotalItemCountAsync(_filteredGames.Count());
        await State.SetCurrentPageIndexAsync(CurrentPage - 1);
    }

    private async void FilterGames()
    {
        _filteredGames = _games
        .Where(g => string.IsNullOrWhiteSpace(_searchTerm) ||
        g.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
        (g.Description?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
        .Where(g => string.IsNullOrWhiteSpace(_selectedGenre) || g.Genre.Name == _selectedGenre);

        await State.SetTotalItemCountAsync(_filteredGames.Count());
        CurrentPage = 1;
        await State.SetCurrentPageIndexAsync(0);
    }
}
