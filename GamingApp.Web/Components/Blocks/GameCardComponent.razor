@using GamingApp.Web.Models
@inject ILogger<GameCardComponent> Logger

@foreach (var game in Games)
{
    <FluentCard @onclick="() => OpenGameDetails(game)" Class="game-card">
        <div class="card-image">
            <img src="@game.PictureUrl" alt="@game.Name" loading="lazy" />
            @if (game.LastPlayedDate.HasValue)
            {
                <div class="progress-bar">
                    <div class="progress" style="width: @GetProgressWidth(game)%"></div>
                </div>
            }
        </div>
        <div class="card-content">
            <h3 class="game-title">@game.Name</h3>
            <p class="game-brief">@(game.Description?.Length > 50 ? game.Description[..50] + "..." : game.Description)</p>
            <p class="game-genre">@game.Genre.Name</p>
            <FluentButton Appearance="Appearance.Accent" OnClick="() => PlayGame(game)">Play Now</FluentButton>
        </div>
    </FluentCard>
}

<FluentDialog @ref="_myFluentDialog" @bind-Hidden="Hidden" AriaLabel="Game Details" Modal="true">
    <FluentDialogHeader>
        <h2>@_selectedGame?.Name</h2>
    </FluentDialogHeader>
    <FluentDialogBody>
        @if (_selectedGame != null)
        {
            <div class="dialog-content">
                <img src="@_selectedGame.PictureUrl" alt="@_selectedGame.Name" class="dialog-image" loading="lazy" />
                <p class="game-description">@_selectedGame.Description</p>
                <div class="game-details">
                    <p><strong>Created:</strong> @_selectedGame.CreatedAt.ToShortDateString()</p>
                    <p><strong>Genre:</strong> @_selectedGame.Genre.Name</p>
                    @if (_selectedGame.Developer != null)
                    {
                        <p><strong>Developer:</strong> @_selectedGame.Developer</p>
                    }
                    @if (_selectedGame.LastPlayedDate.HasValue)
                    {
                        <p><strong>Last Played:</strong> @_selectedGame.LastPlayedDate.Value.ToShortDateString()</p>
                    }
                    <p><strong>Rating:</strong> @_selectedGame.Rating</p>
                    <p><strong>Platform:</strong> @_selectedGame.Platform</p>
                </div>
            </div>
        }
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" OnClick="OnClose">Close</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="() => PlayGame(_selectedGame)">Play Now</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private FluentDialog? _myFluentDialog;
    [Parameter] public IEnumerable<Game> Games { get; set; } = Array.Empty<Game>();
    private bool Hidden { get; set; } = true;
    private Game? _selectedGame;

    private void OpenGameDetails(Game game)
    {
        _selectedGame = game;
        _myFluentDialog!.Show();
    }

    private void OnClose()
    {
        _myFluentDialog!.Hide();
    }

    private int GetProgressWidth(Game game)
    {
        // This is a placeholder implementation. You might want to replace this with actual progress logic.
        return game.LastPlayedDate.HasValue ? 75 : 0;
    }

    private void PlayGame(Game? game)
    {
        if (game != null)
        {
            Logger.LogInformation($"Playing game: {game.Name}");
            // Add logic to start the game
        }
    }
}
