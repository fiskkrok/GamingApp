@using GamingApp.Web.Models

<LazyLoadComponent TComponent="FluentCard" Parameters="@(new Dictionary<string, object>
{
    { "ChildContent", (RenderFragment)(builder =>
        {
            foreach (var game in Games)
            {
                builder.OpenComponent<LazyGameCard>(2);
                builder.AddAttribute(1, "Game", game);
                builder.AddAttribute(2, "OnGameSelected", EventCallback.Factory.Create<Game>(this, OpenGameDetails));
                builder.CloseComponent();
            }
        })
    }
})" />

<FluentDialog @ref="_myFluentDialog" @bind-Hidden="Hidden" AriaLabel="Game Details" Modal="true">
    <FluentDialogHeader>
        <h2>@_selectedGame?.Name</h2>
    </FluentDialogHeader>
    <FluentDialogBody>
        @if (_selectedGame != null)
        {
            <div class="dialog-content">
                <img src="@_selectedGame.PictureUrl" alt="@_selectedGame.Name" class="dialog-image" loading="lazy" />
                <p class="game-description">@_selectedGame.Description</p>
                <div class="game-details">
                    <p><strong>Created:</strong> @_selectedGame.CreatedAt.ToShortDateString()</p>
                    <p><strong>Genre:</strong> @_selectedGame.Genre.Name</p>
                    @if (_selectedGame.Developer != null)
                    {
                        <p><strong>Developer:</strong> @_selectedGame.Developer</p>
                    }
                    @if (_selectedGame.LastPlayedDate.HasValue)
                    {
                        <p><strong>Last Played:</strong> @_selectedGame.LastPlayedDate.Value.ToShortDateString()</p>
                    }
                </div>
            </div>
        }
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" OnClick="OnClose">Close</FluentButton>
        <FluentButton Appearance="Appearance.Accent">Play Now</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private FluentDialog? _myFluentDialog;
    [Parameter] public IEnumerable<Game> Games { get; set; } = Array.Empty<Game>();
    private bool Hidden { get; set; } = true;
    private Game? _selectedGame;

    private void OpenGameDetails(Game game)
    {
        _selectedGame = game;
        _myFluentDialog!.Show();
    }

    private void OnClose()
    {
        _myFluentDialog!.Hide();
    }
}
