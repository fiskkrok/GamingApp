@using Ljbc1994.Blazor.IntersectionObserver
@typeparam TComponent where TComponent : IComponent

@if (_isVisible)
{
    <DynamicComponent Type="@typeof(TComponent)" Parameters="@_combinedParameters" />
}
else
{
    <div @ref="_elementReference" style="min-height: 20px;">
        <FluentProgressRing />
    </div>
}

@code {
    [Inject] private IIntersectionObserverService IntersectionObserverService { get; set; } = default!;
    [Parameter] public Dictionary<string, object>? Parameters { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _isVisible;
    private ElementReference _elementReference;
    private Dictionary<string, object>? _combinedParameters;
    private IntersectionObserver? _observer;

    protected override void OnParametersSet()
    {
        _combinedParameters = Parameters ?? new Dictionary<string, object>();
        if (ChildContent != null)
        {
            _combinedParameters["ChildContent"] = ChildContent;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
          _observer = await IntersectionObserverService.Observe(_elementReference, (entries) =>
            {
                if (entries.First().IsIntersecting)
                {
                    _isVisible = true;
                    InvokeAsync(StateHasChanged);
                }
            });
        }
    }

    public void Dispose()
    {
        _observer?.Dispose();
    }
}
