@using GamingApp.Web.Models
@using GamingApp.Web.Services
@inject IImageOptimizationService ImageService

<LazyLoadComponent TComponent="FluentCard" Parameters="@(new Dictionary<string, object>
{
    { "onclick", EventCallback.Factory.Create(this, () => OpenGameDetails(Game)) },
    { "class", "game-card" },
    { "ChildContent", (RenderFragment)(builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "card-image");
            builder.OpenElement(2, "img");
            builder.AddAttribute(3, "src", ImageService.GetOptimizedImageUrl(Game.PictureUrl, 300, 200));
            builder.AddAttribute(4, "alt", Game.Name);
            builder.AddAttribute(5, "loading", "lazy");
            builder.AddAttribute(6, "decoding", "async");
            builder.AddAttribute(7, "sizes", "(max-width: 768px) 100vw, 300px");
            builder.AddAttribute(8, "onload", "this.style.opacity='1'");
            builder.AddAttribute(9, "style", "opacity: 0; transition: opacity 0.3s;");
            builder.CloseElement();
            builder.OpenElement(10, "noscript");
            builder.OpenElement(11, "img");
            builder.AddAttribute(12, "src", ImageService.GetOptimizedImageUrl(Game.PictureUrl, 300, 200));
            builder.AddAttribute(13, "alt", Game.Name);
            builder.AddAttribute(14, "style", "opacity: 1;");
            builder.CloseElement();
            builder.CloseElement();
            if (Game.LastPlayedDate.HasValue)
            {
                builder.OpenElement(15, "div");
                builder.AddAttribute(16, "class", "progress-bar");
                builder.OpenElement(17, "div");
                builder.AddAttribute(18, "class", "progress");
                builder.AddAttribute(19, "style", $"width: {GetProgressWidth()}%");
                builder.CloseElement();
                builder.CloseElement();
            }
            builder.CloseElement();
            builder.OpenElement(20, "div");
            builder.AddAttribute(21, "class", "card-content");
            builder.OpenElement(22, "h3");
            builder.AddAttribute(23, "class", "game-title");
            builder.AddContent(24, Game.Name);
            builder.CloseElement();
            builder.OpenElement(25, "p");
            builder.AddAttribute(26, "class", "game-brief");
            builder.AddContent(27, Game.Description?.Length > 50 ? Game.Description[..50] + "..." : Game.Description);
            builder.CloseElement();
            builder.OpenElement(28, "p");
            builder.AddAttribute(29, "class", "game-genre");
            builder.AddContent(30, Game.Genre.Name);
            builder.CloseElement();
            builder.CloseElement();
        })
    }
})" />

@code {
    [Parameter, EditorRequired] public Game Game { get; set; } = default!;
    [Parameter] public EventCallback<Game> OnGameSelected { get; set; }

    private async Task OpenGameDetails(Game game)
    {
        await OnGameSelected.InvokeAsync(game);
    }

    private int GetProgressWidth()
    {
        return Game.LastPlayedDate.HasValue ? 75 : 0;
    }
}
