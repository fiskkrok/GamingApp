@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        <FluentStack HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Center">
            <button @onclick="@(() => NavManager.NavigateTo("/notifications"))" class="menu-button">
                <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" Color="Color.Accent" />
                @if (_notificationCount > 0)
                {
                    <FluentBadge Appearance="Appearance.Accent" Color="Color.Accent" Data="@_notificationCount.ToString()" />
                }
            </button>
            <button @onclick="@(() => NavManager.NavigateTo("/messages"))" class="menu-button">
                <FluentIcon Value="@(new Icons.Regular.Size24.ChatBubblesQuestion())" Color="Color.Accent" />
                @if (_unreadMessageCount > 0)
                {
                    <FluentBadge Appearance="Appearance.Accent" Color="Color.Accent" Data="@_unreadMessageCount.ToString()" />
                }
            </button>
            <button @onclick="@(() => open = !open)" Id="btnOpen1" class="menu-button">
                <div style="display: flex; align-items: center; justify-content: space-between;">
                <p class="userName">@userName</p>
                <FluentIcon Value="@(new Icons.Regular.Size24.Person())" Color="Color.Accent"/>
                </div>
            </button>
            <FluentMenu Anchor="btnOpen1" @bind-Open="open" HorizontalPosition="HorizontalPosition.Center">
                <div class="btn-group">
                    <button onclick="@(() => NavManager.NavigateTo("/profile"))" class="btn btn-light">Profile</button>
                    <button onclick="@(() => NavManager.NavigateTo("/settings"))" class="btn btn-light">Settings</button>
                <form method="post" action="user/signout" @formname="logout" style="color: transparent;">
                    <AntiforgeryToken />
                        <button class="btn btn-light" type="submit">Log out</button>
                </form>
                </div>
            </FluentMenu>
        </FluentStack>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    private bool open = false;
    private int _notificationCount = 10;
    private int _unreadMessageCount = 10;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name;
        }
    }
}
