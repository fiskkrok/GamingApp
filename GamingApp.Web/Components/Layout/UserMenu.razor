@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        <FluentStack HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Center">
            <button  OnClick="@(() => NavManager.NavigateTo("/notifications"))" class="menu-button">
                <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" Color="Color.Accent" />
                @if (_notificationCount > 0)
                {
                    <FluentBadge Appearance="Appearance.Accent" Color="Color.Accent" Data="@_notificationCount.ToString()" />
                }
            </button>
            <button  OnClick="@(() => NavManager.NavigateTo("/messages"))" class="menu-button">
                <FluentIcon Value="@(new Icons.Regular.Size24.ChatBubblesQuestion())" Color="Color.Accent" />
                @if (_unreadMessageCount > 0)
                {
                    <FluentBadge Appearance="Appearance.Accent" Color="Color.Accent" Data="@_unreadMessageCount.ToString()" />
                }
            </button>
            <button @onclick="@(() => open = !open)" Id="btnOpen1" class="menu-button">
                <FluentIcon Value="@(new Icons.Regular.Size24.Person())" Color="Color.Accent" />
                <p class="userName">@userName</p>
            </button>
            <FluentMenu Class="menu-button" Anchor="btnOpen1" @bind-Open="open" HorizontalPosition="HorizontalPosition.Center">
                <FluentMenuItem OnClick="@(() => NavManager.NavigateTo("/profile"))">Profile</FluentMenuItem>
                <FluentMenuItem OnClick="@(() => NavManager.NavigateTo("/settings"))">Settings</FluentMenuItem>
                <FluentMenuItem>
                    <form method="post" action="user/signout" @formname="logout" style="color: transparent;">
                        <AntiforgeryToken />
                        <button type="submit">Log out</button>
                    </form>
                </FluentMenuItem>
            </FluentMenu>
        </FluentStack>
    </Authorized>
</AuthorizeView>

@code {
    private bool open = false;
    private int _notificationCount = 10;
    private int _unreadMessageCount = 10;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name;
        }
    }
}
