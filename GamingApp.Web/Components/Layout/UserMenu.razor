@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        <div class="user-menu">
            <FluentButton Class="user-menu-button" @onclick="@(() => NavManager.NavigateTo("/notifications"))"
                aria-label="Notifications">
                <FluentIcon Value="@(new Icons.Regular.Size20.Alert())" />
                @if (_notificationCount > 0)
                {
                    <FluentBadge Appearance="Appearance.Accent" Data="@_notificationCount.ToString()" />
                }
            </FluentButton>

            <FluentButton Class="user-menu-button" @onclick="@(() => NavManager.NavigateTo("/messages"))"
                aria-label="Messages">
                <FluentIcon Value="@(new Icons.Regular.Size20.ChatBubblesQuestion())" />
                @if (_unreadMessageCount > 0)
                {
                    <FluentBadge Appearance="Appearance.Accent" Data="@_unreadMessageCount.ToString()" />
                }
            </FluentButton>

            <FluentButton Id="userMenuPopover" Class="user-menu-button" @onclick="() => _isMenuOpen = !_isMenuOpen"
                aria-label="User menu">
                <FluentIcon Value="@(new Icons.Regular.Size20.Person())" />
                <span class="user-name">@userName</span>
            </FluentButton>

            <FluentPopover @bind-Open="_isMenuOpen" AnchorId="userMenuPopover">

                <Body>
                    <nav class="user-menu-nav">
                        <FluentAnchor Href="/profile" IconStart="@(new Icons.Regular.Size16.Person())">Profile
                        </FluentAnchor>
                        <FluentAnchor Href="/settings" IconStart="@(new Icons.Regular.Size16.Settings())">Settings
                        </FluentAnchor>
                        <FluentDivider Role="DividerRole.Presentation" />
                        <form method="post" action="user/signout" @formname="logout">
                            <AntiforgeryToken />
                            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Lightweight"
                                IconStart="@(new Icons.Filled.Size20.ArrowExit())">Log out</FluentButton>
                        </form>
                    </nav>
                </Body>
            </FluentPopover>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    private bool _isMenuOpen = false;
    private int _notificationCount = 10;
    private int _unreadMessageCount = 10;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name;
        }
    }
}